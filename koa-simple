const http = require('http');

class Application {
    constructor(){
        this.middlewares = [];
    }

    listen(...args){
        const server = http.createServer(async (req, res) => {
            const ctx = new Context(req, res);

            const fn = this.compose();
            await fn(ctx);

            ctx.res.end(ctx.body);
        })
        server.listen(...args);
    }

    use(middleware) {
        this.middlewares.push(middleware);
    }

    compose(){
        return (ctx) => {
            const dispatch = (index) => {
                const middleware = this.middlewares[index];
                if(index === this.middlewares.length) return;
                return middleware(ctx, () => dispatch(index+1));
            }
            return dispatch(0);
        }
    }
}
class Context {
    constructor(req, res){
        this.req = req;
        this.res = res;
    }
}


const app = new Application();

app.use(async (ctx, next) => {
    ctx.body = "hello, one";
    await next();
});

app.use(async (ctx, next) => {
    ctx.body = "hello, two";
    await next();
});

app.listen(3000);
